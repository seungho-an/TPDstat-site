{"title":"Getting Started with R, R Studio","markdown":{"yaml":{"title":"Getting Started with R, R Studio","author":"Gov 50","date":"2022-08-12","summary":"A guide to installing and setting up the software required for Gov 50."},"headingText":"Installing R and RStudio","containsRefs":false,"markdown":"\n\n\nIn this problem set, we're going to get R, RStudio, and R Markdown set up on your computer. To get started, follow these steps: \n\n1. Download and install the most recent version of [R][]. There are versions available for the Windows, Mac, and Linux operating systems. On a Windows machine, you will want to install using the `R-x.y.z-win.exe` file where `x.y.z` is a version number. On a Mac, you will want to install using the `R-x.y.z.pkg` file that is notarized and signed. \n2. With R installed, download and install [RStudio][]. RStudio is a type of \"integrated development environment\" or IDE designed for R. It makes working with R considerably easier and is available for most platforms. It is also free. \n3. Install the packages we will use throughout the semester. To do this, either type or copy and paste each of the following lines of code into the \"Console\" in RStudio (lower left panel by default). Make sure you do this separately for each line. If you are asked if you want to install any packages from source, type \"no\". Note that the symbols next to `my_package` are a less than sign `<` followed by a minus sign `-` with no space between them. (Don't be worried if you see some red text here. Those are usually just messages telling you information about the packages you are installing. Unless you see the word `Error` you should be fine.)\n\n```{r, eval = FALSE}\nmy_packages <- c(\"tidyverse\", \"usethis\", \"devtools\", \"learnr\",\n                 \"tinytex\", \"gitcreds\")\ninstall.packages(my_packages, repos = \"http://cran.rstudio.com\")\nremotes::install_github(\"kosukeimai/qss-package\", build_vignettes = TRUE)\n```\n  \n\n\n4. For some things in the course, we'll need produce PDFs from R and that requires something called LaTeX. If you've never heard of that, it's completely fine and you should just run the following two lines of R code:\n\n```{r, eval = FALSE}\ninstall.packages('tinytex')\ntinytex::install_tinytex()  # install TinyTeX\n```\n\n\n## Installing and configuring git\n\nGit is a version control program that helps organize the process of writing and maintaining code. It allows you to maintain a history of edits to your code without having to resort to a set of files like:\n\n```\nmy_code.R\nmy_code_v1.R\nmy_code_v2_FINAL.R\n```\n\nThere's a lot to git and it will be harder to use in the beginning, but in the long term there are huge benefits of it. First, when you use git, you are much less likely to encounter a devastating data failure. All of your (committed) changes to your project are preserved, even when you make new changes or you revert old changes. \n\nGit is also a very useful way for people to collaborate. There is a huge community built up around it. And once your projects are publicly available on Github (a website for hosting git repositories), there are a host of ways that folks can collaborate with you. \n\n### Install git\n\nYou might already have git installed on your computer, especially if you have a Mac. To check, in RStudio, click on the Terminal tab in the bottom-left panel (next to the Console tab). Type `git --version` at the command prompt. If you get a response with a version number, great you are all set. If you get any kind of error message, you learn how to install git on your machine [here][happygit]. \n\n### Setup a GitHub account\n\nNext, you can setup a [GitHub][] account. You can think of GitHub as similar to Dropbox or Google Drive for your git projects (\"repositories\") where everything is public by default. Since you might use this account to interact with potential employers in the future, you should probably pick a professional username. \n\nOnce you have a GitHub account, you can configure your local git program to interact with your account gracefully. Run the following two lines of code in the Terminal replacing `\"John Harvard\"` with your name and `\"john@harvard.edu\"` with your email address used to sign up for GitHub. \n\n```\ngit config --global user.name \"John Harvard\"\ngit config --global user.email \"john@harvard.edu\"\n```\n\n### Set up RStudio to talk to GitHub\n\nWe also need to set up RStudio to be able to communicate with GitHub securely. This requires a bit of fidily configuration that we luckily only have to do once. Basically, we need to get a secret code from GitHub and store it in RStudio (kind of like a app-specific password when you're using two-factor authentication). We can start the process from by doing:\n\n```{r eval = FALSE}\nusethis::create_github_token()\n```\n\nThis will open a page on GitHub asking you to create a \"Personal Access Token\" or PAT (this is the secret code). You'll have to give the PAT a note that describes what it's for and choose an expiration date. You can accept the default of 30 days but you will have to renew it a couple of times during the class. Alternatively, if you set it to a date after the semester ends, you shouldn't have to touch this again. We recommend keeping the \"scope\" selections as they are and clicking the \"Generate Token\" button at the bottom of the page.\n\n![](/files/img/assignments/github-pat.png){fig-alt=\"Create a GitHub PAT\"}\n\nYou will then see a new screen with a long sequence of letters. This is your token or secret code. You should treat it like a password and do not share it with anyone. If you use a password manager like 1Password or LastPass, you can put it in a secure note in those programs. Copy this by hitting the button with the two boxes. \n\n![](/files/img/assignments/github-pat-copy.png){fig-alt=\"Copy the GitHub PAT\"}\n\nOnce you have copied the PAT, call `gitcreds::gitcreds_set()` from the RStudio console and paste the PAT when prompted. You should see the following:\n\n```\n> gitcreds::gitcreds_set()\n? Enter password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n-> Adding new credentials...\n-> Removing credentials from cache...\n-> Done.\n```\n\nOnce this is done, you should be all set for RStudio to communicate with GitHub. If you have any problems with the PAT process or want to know more about it, the [Happy Git and GitHub for the useR](https://happygitwithr.com/) book has a [great chapter](https://happygitwithr.com/https-pat.html) about it. \n\n\n### Creating your first repo\n\nOnce you are logged into Github and at its homepage, you can now create a new repo (shorthand for \"repository\"). These repositories are like folders in Dropbox except a bit more structured. Create one by clicking on the green \"New\" button in the top-left of the screen next to \"Repositories.\" It should look like this:\n\n![](/files/img/assignments/github-create-new.png){fig-alt=\"Create a new repo\"}\n \nNow a new screen should pop up requesting some information for the new repo. Give this new Repository the name `gov50-problem-set0` and set it to be a private repository. You can give it an informative description and check the \"Initialize this repository with a README\" checkbox. This latter option will add a README to the repository where you can add more information that will display nicely in the repository's homepage. Your setup should look something like this:\n\n![](/files/img/assignments/github-create-options.png){fig-alt=\"New Repo Options\"}\n\n\nOnce you create your repo, you are ready to connect it to RStudio on your local computer. The easiest way to do this is go to the repo homepage (you're already there if you've just created it) and click on the green \"Code\" button toward the top right of the page. When you click that, a popup will appear and you can copy the URL (you can click the little clipboard icon to copy this automatically). \n\n![](/files/img/assignments/github-clone.png){fig-alt=\"Cloning the repo\"}\n\nNow, switch to RStudio. Go to the menu bar and hit \"File > New Project\". You can then choose what type of project to start. Since we're importing from Github, we'll use the \"Version Control\" option (it's the bottom of the list). In the next menu, choose \"Git\". Now, you can paste the URL in the \"Repository URL\" box. Choose a set of local directories to place this project and hit \"Create Project\". And now you'll have your project ready to go in RStudio. \n\n## Working with a project in RStudio\n\nYou'll see in the bottom right window of RStudio you'll now see the files from your Github project. \n\n![](/files/img/assignments/rstudio-files.png){fig-alt=\"Files in RStudio\"}\n\n\nLet's edit the README file by clicking on `README.md` in that file pane and you'll be able to edit it in the top-left pane. Change the header from `# gov-50-problem-set0` to `# Introduction` and save the file (âŒ˜+S or Ctrl+S). If you click on the \"Git\" tab in the top right panel, you will a list of the changes you've made to the repo since the last commit (you can think of a commit as a more permanent type of saving work to the git repo). \n\n![](/files/img/assignments/rstudio-git-panel.png){fig-alt=\"Git panel in RStudio\"}\n\n\nOne thing you'll notice here is that git thinks that `gov50-problem-set0.Rproj` is a file that maybe should go into the repo. But this file is just for our local copy of RStudio and shouldn't really go into the repo. To prevent git from bothering us about it every time we open something, we can modify the `.gitignore` file to tell git to ignore certain files. Open `.gitignore` and add a new line with `*.Rproj` on it to tell git to ignore any file with the extension `.Rproj`. Make sure to save the file. \n\n![](/files/img/assignments/rstudio-edit-gitignore.png){fig-alt=\"Editing .gitignore\"}\n\n\nIf you go back to the Git tab in the top right and refresh (little circular arrow in the top right corner), you see that `gov50-problem-set0.Rproj` is removed from our list. Now we are ready to commit our changes. Click the \"Staged\" box for `.gitignore` and `README.md` and hit the \"Commit\" button just above the file list. You'll see a window with the changes that you are about to commit. \n\n![](/files/img/assignments/rstudio-commit.png){fig-alt=\"Commit dialog box in RStudio\"}\n\n\nYou can click on different files to see what exactly you are changing. Add a short but informative commit message that describes what you are committing and hit \"Commit\". Once this completes, you can hit the \"Push\" button in the top right to push that commit back to Github. \n\n![](/files/img/assignments/rstudio-push.png){fig-alt=\"Push to GitHub\"}\n\nIf you go back to your repo's homepage on Github and refresh the page, you'll see the updates to your README file and the new `.gitignore`.\n\n![](/files/img/assignments/github-changed.png){fig-alt=\"Github repo after commit\"}\n\nAnd you're done! You've just created your first repo. \n\n\n\n[R]: https://cloud.r-project.org/\n[RStudio]:https://rstudio.com/\n[happygit]: https://happygitwithr.com/install-git.html\n[Github]: https://github.com/join\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"00-problem-set.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","_quarto-vars":{"author":"Seung-Ho An","instructor":{"name":"Prof. Seung-Ho An","name_no_title":"Seung-Ho An","office":"SS 135","email":"seunghoan@arizona.edu","url":"https://www.seunghoan.com","twitter":"seunghoan","contact_policy":"We will have a team chat on \"Teams.\" If you have any questions, feel free to send me an email. I normally try to answer within 24 hours. If you don't hear from me in 48 hours, please feel free to send me a reminder.","appointment_url":"https://calendly.com/seunghoan/30min"},"course":{"number":"TPDstat","semester":"Spring 2023","days":"Wed.","time":"9:30â€“11:30 AM","location":"TPD","dates":"March 1st-April 26th, 2023","url":"https://tpdstats23.classes.seunghoan.com","copyright_year":"2023"},"university":{"name":"University of Arizona","url":"https://www.arizona.edu"}},"theme":["litera","../html/custom.scss"],"title":"Getting Started with R, R Studio","author":"Gov 50","date":"2022-08-12","summary":"A guide to installing and setting up the software required for Gov 50."},"extensions":{"book":{"multiFile":true}}}}}